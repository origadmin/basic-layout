// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: middlewares/security/security.proto

package security

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuthorizationConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizationConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizationConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizationConfigMultiError, or nil if none found.
func (m *AuthorizationConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizationConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for SigningMethod

	// no validation rules for SigningKey

	// no validation rules for OldSigningKey

	if all {
		switch v := interface{}(m.GetExpiredTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthorizationConfigValidationError{
					field:  "ExpiredTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthorizationConfigValidationError{
					field:  "ExpiredTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiredTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthorizationConfigValidationError{
				field:  "ExpiredTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthorizationConfigMultiError(errors)
	}

	return nil
}

// AuthorizationConfigMultiError is an error wrapping multiple validation
// errors returned by AuthorizationConfig.ValidateAll() if the designated
// constraints aren't met.
type AuthorizationConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizationConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizationConfigMultiError) AllErrors() []error { return m }

// AuthorizationConfigValidationError is the validation error returned by
// AuthorizationConfig.Validate if the designated constraints aren't met.
type AuthorizationConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizationConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizationConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizationConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizationConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizationConfigValidationError) ErrorName() string {
	return "AuthorizationConfigValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizationConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizationConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizationConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizationConfigValidationError{}

// Validate checks the field values on CasbinConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CasbinConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CasbinConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CasbinConfigMultiError, or
// nil if none found.
func (m *CasbinConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CasbinConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for PolicyFile

	// no validation rules for ModelFile

	if len(errors) > 0 {
		return CasbinConfigMultiError(errors)
	}

	return nil
}

// CasbinConfigMultiError is an error wrapping multiple validation errors
// returned by CasbinConfig.ValidateAll() if the designated constraints aren't met.
type CasbinConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CasbinConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CasbinConfigMultiError) AllErrors() []error { return m }

// CasbinConfigValidationError is the validation error returned by
// CasbinConfig.Validate if the designated constraints aren't met.
type CasbinConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CasbinConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CasbinConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CasbinConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CasbinConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CasbinConfigValidationError) ErrorName() string { return "CasbinConfigValidationError" }

// Error satisfies the builtin error interface
func (e CasbinConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCasbinConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CasbinConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CasbinConfigValidationError{}

// Validate checks the field values on SecurityConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SecurityConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecurityConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SecurityConfigMultiError,
// or nil if none found.
func (m *SecurityConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *SecurityConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuthorization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecurityConfigValidationError{
					field:  "Authorization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecurityConfigValidationError{
					field:  "Authorization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthorization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecurityConfigValidationError{
				field:  "Authorization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCasbin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecurityConfigValidationError{
					field:  "Casbin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecurityConfigValidationError{
					field:  "Casbin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCasbin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecurityConfigValidationError{
				field:  "Casbin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SecurityConfigMultiError(errors)
	}

	return nil
}

// SecurityConfigMultiError is an error wrapping multiple validation errors
// returned by SecurityConfig.ValidateAll() if the designated constraints
// aren't met.
type SecurityConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecurityConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecurityConfigMultiError) AllErrors() []error { return m }

// SecurityConfigValidationError is the validation error returned by
// SecurityConfig.Validate if the designated constraints aren't met.
type SecurityConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecurityConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecurityConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecurityConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecurityConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecurityConfigValidationError) ErrorName() string { return "SecurityConfigValidationError" }

// Error satisfies the builtin error interface
func (e SecurityConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurityConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecurityConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecurityConfigValidationError{}
