syntax = "proto3";

package config.v1;

import "buf/validate/validate.proto";
import "google/protobuf/duration.proto";

option cc_enable_arenas = true;
option go_package = "github.com/origadmin/runtime/gen/go/config/v1;configv1";
option java_multiple_files = true;
option java_outer_classname = "CorsProto";
option java_package = "com.github.origadmin.toolkits.runtime.config";
option objc_class_prefix = "Config";

// Data
message Data {

    // Database
    message Database {
        // Debugging
        bool debug = 1 [json_name = "debug"];
        // Driver name: mysql, postgresql, mongodb, sqlite......
        string driver = 2 [json_name = "driver", (buf.validate.field).string = {in: ["mssql", "mysql", "postgresql", "mongodb", "sqlite", "oracle", "sqlserver", "sqlite3"]}];
        // Data source (DSN string)
        string source = 3 [json_name = "source"];
        // Data migration switch
        bool migrate = 10 [json_name = "migrate"];
        // Link tracking switch
        bool enable_trace = 12 [json_name = "enable_trace"];
        // Performance analysis switch
        bool enable_metrics = 13 [json_name = "enable_metrics"];
        // Maximum number of free connections in the connection pool
        int32 max_idle_connections = 20 [json_name = "max_idle_connections"];
        // Maximum number of open connections in the connection pool
        int32 max_open_connections = 21 [json_name = "max_open_connections"];
        // Maximum length of time that the connection can be reused
        google.protobuf.Duration connection_max_lifetime = 22 [json_name = "connection_max_lifetime"];
      // Maximum number of connections in the connection pool for reading
      google.protobuf.Duration connection_max_idle_time = 23 [json_name = "connection_max_idle_time"];
    }

    // Redis
    message Redis {
        string network = 1;
        string addr = 2;
        string password = 3;
        int32 db = 4;
        google.protobuf.Duration dial_timeout = 5;
        google.protobuf.Duration read_timeout = 6;
        google.protobuf.Duration write_timeout = 7;
    }

    // Memcached
    message Memcached {
        string addr = 1 [json_name = "addr"];
        string username = 2 [json_name = "username"];
        string password = 3 [json_name = "password"];
        int32 max_idle = 4 [json_name = "max_idle"];
        google.protobuf.Duration timeout = 5 [json_name = "timeout"];
    }

    // Memory
    message Memory {
        int32 size = 1;
        int32 capacity = 2;
        google.protobuf.Duration expiration = 3 [json_name = "expiration"];
        google.protobuf.Duration cleanup_interval = 4 [json_name = "cleanup_interval"];
    }

    // File
    message File {
        string root = 1;
    }

    // OSS
    message Oss {

    }

    // Mongo
    message Mongo {

    }

    // Storage
    message Storage {
        string type = 1 [json_name = "type", (buf.validate.field).string = {in: ["none", "file", "redis", "mongo", "oss"]}];
        File file = 10;
        Redis redis = 11;
        Mongo mongo = 12;
        Oss oss = 13;
    }

    // Cache
    message Cache {
        // Driver name: redis, memcached, etc.
      string driver = 1 [json_name = "driver", (buf.validate.field).string = {in: ["none", "redis", "memcached", "memory"]}];
        // Redis
        Redis redis = 2 [json_name = "redis"];
        // Memcached
        Memcached memcached = 3 [json_name = "memcached"];
        // Memory cache
        Memory memory = 4 [json_name = "memory"];
    }

    // Database
    Database database = 1 [json_name = "database"];
    // Cache
    Cache cache = 2 [json_name = "cache"];
    // Storage
    Storage storage = 3 [json_name = "storage"];

}