// Code generated by protoc-gen-go-gins. DO NOT EDIT.
// versions:
// - protoc-gen-go-gins 0.0.6
// - protoc             (unknown)
// source: helloworld/greeter.proto

package helloworld

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	gins "github.com/origadmin/contrib/transport/gins"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = new(gin.H)
var _ = binding.EncodeURL

const _ = gins.SupportPackageIsVersion1

const HelloGreeterAPI_CreateGreeter_OperationName = "/api.v1.services.helloworld.HelloGreeterAPI/CreateGreeter"
const HelloGreeterAPI_DeleteGreeter_OperationName = "/api.v1.services.helloworld.HelloGreeterAPI/DeleteGreeter"
const HelloGreeterAPI_GetGreeter_OperationName = "/api.v1.services.helloworld.HelloGreeterAPI/GetGreeter"
const HelloGreeterAPI_ListGreeter_OperationName = "/api.v1.services.helloworld.HelloGreeterAPI/ListGreeter"
const HelloGreeterAPI_PostHello_OperationName = "/api.v1.services.helloworld.HelloGreeterAPI/PostHello"
const HelloGreeterAPI_SayHello_OperationName = "/api.v1.services.helloworld.HelloGreeterAPI/SayHello"
const HelloGreeterAPI_UpdateGreeter_OperationName = "/api.v1.services.helloworld.HelloGreeterAPI/UpdateGreeter"

type HelloGreeterAPIGINSServer interface {
	// CreateGreeter CreateGreeter creates a new Greeter
	CreateGreeter(context.Context, *CreateGreeterRequest) (*CreateGreeterResponse, error)
	// DeleteGreeter DeleteGreeter deletes a Greeter
	DeleteGreeter(context.Context, *DeleteGreeterRequest) (*DeleteGreeterResponse, error)
	// GetGreeter GetGreeter gets a Greeter
	GetGreeter(context.Context, *GetGreeterRequest) (*GetGreeterResponse, error)
	// ListGreeter ListGreeter lists Greeters
	ListGreeter(context.Context, *ListGreeterRequest) (*ListGreeterResponse, error)
	// PostHello PostHello is a post method
	PostHello(context.Context, *PostHelloRequest) (*PostHelloResponse, error)
	// SayHello SayHello is a get method
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
	// UpdateGreeter UpdateGreeter updates a Greeter
	UpdateGreeter(context.Context, *UpdateGreeterRequest) (*UpdateGreeterResponse, error)
}

func RegisterHelloGreeterAPIGINSServer(router gins.IRouter, srv HelloGreeterAPIGINSServer) {
	router.GET("/api/v1/helloworld/greeter/:id/hello", _HelloGreeterAPI_SayHello0_GIN_Handler(srv))
	router.POST("/api/v1/helloworld/greeter/:id/hello", _HelloGreeterAPI_PostHello0_GIN_Handler(srv))
	router.POST("/api/v1/helloworld/greeter", _HelloGreeterAPI_CreateGreeter0_GIN_Handler(srv))
	router.PUT("/api/v1/helloworld/greeter/:id", _HelloGreeterAPI_UpdateGreeter0_GIN_Handler(srv))
	router.DELETE("/api/v1/helloworld/greeter/:id", _HelloGreeterAPI_DeleteGreeter0_GIN_Handler(srv))
	router.GET("/api/v1/helloworld/greeter/:id", _HelloGreeterAPI_GetGreeter0_GIN_Handler(srv))
	router.GET("/api/v1/helloworld/greeter", _HelloGreeterAPI_ListGreeter0_GIN_Handler(srv))
}

func _HelloGreeterAPI_SayHello0_GIN_Handler(srv HelloGreeterAPIGINSServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in SayHelloRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, HelloGreeterAPI_SayHello_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.SayHello(newCtx, &in)
		if err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.ResultJSON(ctx, 200, reply)
		return
	}
}

func _HelloGreeterAPI_PostHello0_GIN_Handler(srv HelloGreeterAPIGINSServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in PostHelloRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, HelloGreeterAPI_PostHello_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.PostHello(newCtx, &in)
		if err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.ResultJSON(ctx, 200, reply.Data)
		return
	}
}

func _HelloGreeterAPI_CreateGreeter0_GIN_Handler(srv HelloGreeterAPIGINSServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in CreateGreeterRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, HelloGreeterAPI_CreateGreeter_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.CreateGreeter(newCtx, &in)
		if err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.ResultJSON(ctx, 200, reply)
		return
	}
}

func _HelloGreeterAPI_UpdateGreeter0_GIN_Handler(srv HelloGreeterAPIGINSServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in UpdateGreeterRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, HelloGreeterAPI_UpdateGreeter_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.UpdateGreeter(newCtx, &in)
		if err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.ResultJSON(ctx, 200, reply)
		return
	}
}

func _HelloGreeterAPI_DeleteGreeter0_GIN_Handler(srv HelloGreeterAPIGINSServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in DeleteGreeterRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, HelloGreeterAPI_DeleteGreeter_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.DeleteGreeter(newCtx, &in)
		if err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.ResultJSON(ctx, 200, reply)
		return
	}
}

func _HelloGreeterAPI_GetGreeter0_GIN_Handler(srv HelloGreeterAPIGINSServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in GetGreeterRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, HelloGreeterAPI_GetGreeter_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.GetGreeter(newCtx, &in)
		if err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.ResultJSON(ctx, 200, reply)
		return
	}
}

func _HelloGreeterAPI_ListGreeter0_GIN_Handler(srv HelloGreeterAPIGINSServer) func(ctx *gins.Context) {
	return func(ctx *gins.Context) {
		var in ListGreeterRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.SetOperation(ctx, HelloGreeterAPI_ListGreeter_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.ListGreeter(newCtx, &in)
		if err != nil {
			gins.ResultError(ctx, err)
			return
		}
		gins.ResultJSON(ctx, 200, reply)
		return
	}
}

type HelloGreeterAPIGINSClient interface {
	CreateGreeter(ctx context.Context, req *CreateGreeterRequest, opts ...gins.CallOption) (rsp *CreateGreeterResponse, err error)
	DeleteGreeter(ctx context.Context, req *DeleteGreeterRequest, opts ...gins.CallOption) (rsp *DeleteGreeterResponse, err error)
	GetGreeter(ctx context.Context, req *GetGreeterRequest, opts ...gins.CallOption) (rsp *GetGreeterResponse, err error)
	ListGreeter(ctx context.Context, req *ListGreeterRequest, opts ...gins.CallOption) (rsp *ListGreeterResponse, err error)
	PostHello(ctx context.Context, req *PostHelloRequest, opts ...gins.CallOption) (rsp *PostHelloResponse, err error)
	SayHello(ctx context.Context, req *SayHelloRequest, opts ...gins.CallOption) (rsp *SayHelloResponse, err error)
	UpdateGreeter(ctx context.Context, req *UpdateGreeterRequest, opts ...gins.CallOption) (rsp *UpdateGreeterResponse, err error)
}

type HelloGreeterAPIGINSClientImpl struct {
	cc *gins.Client
}

func NewHelloGreeterAPIGINSClient(client *gins.Client) HelloGreeterAPIGINSClient {
	return &HelloGreeterAPIGINSClientImpl{client}
}

func (c *HelloGreeterAPIGINSClientImpl) CreateGreeter(ctx context.Context, in *CreateGreeterRequest, opts ...gins.CallOption) (*CreateGreeterResponse, error) {
	var out CreateGreeterResponse
	pattern := "/api/v1/helloworld/greeter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(HelloGreeterAPI_CreateGreeter_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HelloGreeterAPIGINSClientImpl) DeleteGreeter(ctx context.Context, in *DeleteGreeterRequest, opts ...gins.CallOption) (*DeleteGreeterResponse, error) {
	var out DeleteGreeterResponse
	pattern := "/api/v1/helloworld/greeter/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(HelloGreeterAPI_DeleteGreeter_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HelloGreeterAPIGINSClientImpl) GetGreeter(ctx context.Context, in *GetGreeterRequest, opts ...gins.CallOption) (*GetGreeterResponse, error) {
	var out GetGreeterResponse
	pattern := "/api/v1/helloworld/greeter/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(HelloGreeterAPI_GetGreeter_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HelloGreeterAPIGINSClientImpl) ListGreeter(ctx context.Context, in *ListGreeterRequest, opts ...gins.CallOption) (*ListGreeterResponse, error) {
	var out ListGreeterResponse
	pattern := "/api/v1/helloworld/greeter"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(HelloGreeterAPI_ListGreeter_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HelloGreeterAPIGINSClientImpl) PostHello(ctx context.Context, in *PostHelloRequest, opts ...gins.CallOption) (*PostHelloResponse, error) {
	var out PostHelloResponse
	pattern := "/api/v1/helloworld/greeter/{id}/hello"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(HelloGreeterAPI_PostHello_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out.Data, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HelloGreeterAPIGINSClientImpl) SayHello(ctx context.Context, in *SayHelloRequest, opts ...gins.CallOption) (*SayHelloResponse, error) {
	var out SayHelloResponse
	pattern := "/api/v1/helloworld/greeter/{id}/hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(HelloGreeterAPI_SayHello_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HelloGreeterAPIGINSClientImpl) UpdateGreeter(ctx context.Context, in *UpdateGreeterRequest, opts ...gins.CallOption) (*UpdateGreeterResponse, error) {
	var out UpdateGreeterResponse
	pattern := "/api/v1/helloworld/greeter/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(HelloGreeterAPI_UpdateGreeter_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
