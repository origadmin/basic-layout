// Code generated by protoc-gen-go-gins. DO NOT EDIT.
// versions:
// - protoc-gen-go-gins v1.0.0
// - protoc             v5.28.3
// source: api/v1/proto/helloworld/greeter.proto

package helloworld

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	gins "github.com/origadmin/toolkits/runtime/kratos/transport/gins"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = new(gin.H)
var _ = binding.EncodeURL

const _ = gins.SupportPackageIsVersion1

const GreeterService_CreateGreeter_OperationName = "/api.v1.services.helloworld.GreeterService/CreateGreeter"
const GreeterService_DeleteGreeter_OperationName = "/api.v1.services.helloworld.GreeterService/DeleteGreeter"
const GreeterService_GetGreeter_OperationName = "/api.v1.services.helloworld.GreeterService/GetGreeter"
const GreeterService_ListGreeter_OperationName = "/api.v1.services.helloworld.GreeterService/ListGreeter"
const GreeterService_PostHello_OperationName = "/api.v1.services.helloworld.GreeterService/PostHello"
const GreeterService_SayHello_OperationName = "/api.v1.services.helloworld.GreeterService/SayHello"
const GreeterService_UpdateGreeter_OperationName = "/api.v1.services.helloworld.GreeterService/UpdateGreeter"

type GreeterServiceGINServer interface {
	// CreateGreeter CreateGreeter creates a new Greeter
	CreateGreeter(context.Context, *CreateGreeterRequest) (*CreateGreeterResponse, error)
	// DeleteGreeter DeleteGreeter deletes a Greeter
	DeleteGreeter(context.Context, *DeleteGreeterRequest) (*DeleteGreeterResponse, error)
	// GetGreeter GetGreeter gets a Greeter
	GetGreeter(context.Context, *GetGreeterRequest) (*GetGreeterResponse, error)
	// ListGreeter ListGreeter lists Greeters
	ListGreeter(context.Context, *ListGreeterRequest) (*ListGreeterResponse, error)
	// PostHello PostHello is a post method
	PostHello(context.Context, *PostHelloRequest) (*PostHelloResponse, error)
	// SayHello SayHello is a get method
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
	// UpdateGreeter UpdateGreeter updates a Greeter
	UpdateGreeter(context.Context, *UpdateGreeterRequest) (*UpdateGreeterResponse, error)
}

func RegisterGreeterServiceGINServer(router gin.IRouter, srv GreeterServiceGINServer) {
	router.GET("/api/v1/greeter/:id/hello", _GreeterService_SayHello0_GIN_Handler(srv))
	router.POST("/api/v1/greeter/:id/hello", _GreeterService_PostHello0_GIN_Handler(srv))
	router.POST("/api/v1/greeter", _GreeterService_CreateGreeter0_GIN_Handler(srv))
	router.PUT("/api/v1/greeter/:id", _GreeterService_UpdateGreeter0_GIN_Handler(srv))
	router.DELETE("/api/v1/greeter/:id", _GreeterService_DeleteGreeter0_GIN_Handler(srv))
	router.GET("/api/v1/greeter/:id", _GreeterService_GetGreeter0_GIN_Handler(srv))
	router.GET("/api/v1/greeter", _GreeterService_ListGreeter0_GIN_Handler(srv))
}

func _GreeterService_SayHello0_GIN_Handler(srv GreeterServiceGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in SayHelloRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		gins.SetOperation(ctx, GreeterService_SayHello_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.SayHello(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
		return
	}
}

func _GreeterService_PostHello0_GIN_Handler(srv GreeterServiceGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in PostHelloRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		gins.SetOperation(ctx, GreeterService_PostHello_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.PostHello(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply.Data)
		return
	}
}

func _GreeterService_CreateGreeter0_GIN_Handler(srv GreeterServiceGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in CreateGreeterRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		gins.SetOperation(ctx, GreeterService_CreateGreeter_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.CreateGreeter(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
		return
	}
}

func _GreeterService_UpdateGreeter0_GIN_Handler(srv GreeterServiceGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in UpdateGreeterRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		gins.SetOperation(ctx, GreeterService_UpdateGreeter_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.UpdateGreeter(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
		return
	}
}

func _GreeterService_DeleteGreeter0_GIN_Handler(srv GreeterServiceGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in DeleteGreeterRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		gins.SetOperation(ctx, GreeterService_DeleteGreeter_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.DeleteGreeter(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
		return
	}
}

func _GreeterService_GetGreeter0_GIN_Handler(srv GreeterServiceGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in GetGreeterRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		gins.SetOperation(ctx, GreeterService_GetGreeter_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.GetGreeter(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
		return
	}
}

func _GreeterService_ListGreeter0_GIN_Handler(srv GreeterServiceGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in ListGreeterRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		gins.SetOperation(ctx, GreeterService_ListGreeter_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.ListGreeter(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
		return
	}
}

type GreeterServiceGINClient interface {
	CreateGreeter(ctx context.Context, req *CreateGreeterRequest, opts ...gins.CallOption) (rsp *CreateGreeterResponse, err error)
	DeleteGreeter(ctx context.Context, req *DeleteGreeterRequest, opts ...gins.CallOption) (rsp *DeleteGreeterResponse, err error)
	GetGreeter(ctx context.Context, req *GetGreeterRequest, opts ...gins.CallOption) (rsp *GetGreeterResponse, err error)
	ListGreeter(ctx context.Context, req *ListGreeterRequest, opts ...gins.CallOption) (rsp *ListGreeterResponse, err error)
	PostHello(ctx context.Context, req *PostHelloRequest, opts ...gins.CallOption) (rsp *PostHelloResponse, err error)
	SayHello(ctx context.Context, req *SayHelloRequest, opts ...gins.CallOption) (rsp *SayHelloResponse, err error)
	UpdateGreeter(ctx context.Context, req *UpdateGreeterRequest, opts ...gins.CallOption) (rsp *UpdateGreeterResponse, err error)
}

type GreeterServiceGINClientImpl struct {
	cc *gins.Client
}

func NewGreeterServiceGINClient(client *gins.Client) GreeterServiceGINClient {
	return &GreeterServiceGINClientImpl{client}
}

func (c *GreeterServiceGINClientImpl) CreateGreeter(ctx context.Context, in *CreateGreeterRequest, opts ...gins.CallOption) (*CreateGreeterResponse, error) {
	var out CreateGreeterResponse
	pattern := "/api/v1/greeter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(GreeterService_CreateGreeter_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterServiceGINClientImpl) DeleteGreeter(ctx context.Context, in *DeleteGreeterRequest, opts ...gins.CallOption) (*DeleteGreeterResponse, error) {
	var out DeleteGreeterResponse
	pattern := "/api/v1/greeter/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(GreeterService_DeleteGreeter_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterServiceGINClientImpl) GetGreeter(ctx context.Context, in *GetGreeterRequest, opts ...gins.CallOption) (*GetGreeterResponse, error) {
	var out GetGreeterResponse
	pattern := "/api/v1/greeter/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(GreeterService_GetGreeter_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterServiceGINClientImpl) ListGreeter(ctx context.Context, in *ListGreeterRequest, opts ...gins.CallOption) (*ListGreeterResponse, error) {
	var out ListGreeterResponse
	pattern := "/api/v1/greeter"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(GreeterService_ListGreeter_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterServiceGINClientImpl) PostHello(ctx context.Context, in *PostHelloRequest, opts ...gins.CallOption) (*PostHelloResponse, error) {
	var out PostHelloResponse
	pattern := "/api/v1/greeter/{id}/hello"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(GreeterService_PostHello_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out.Data, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterServiceGINClientImpl) SayHello(ctx context.Context, in *SayHelloRequest, opts ...gins.CallOption) (*SayHelloResponse, error) {
	var out SayHelloResponse
	pattern := "/api/v1/greeter/{id}/hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, gins.Operation(GreeterService_SayHello_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterServiceGINClientImpl) UpdateGreeter(ctx context.Context, in *UpdateGreeterRequest, opts ...gins.CallOption) (*UpdateGreeterResponse, error) {
	var out UpdateGreeterResponse
	pattern := "/api/v1/greeter/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, gins.Operation(GreeterService_UpdateGreeter_OperationName))
	opts = append(opts, gins.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
