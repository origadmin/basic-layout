// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/protos/helloworld/greeter.proto

package helloworld

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GreeterData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GreeterData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GreeterData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GreeterDataMultiError, or
// nil if none found.
func (m *GreeterData) ValidateAll() error {
	return m.validate(true)
}

func (m *GreeterData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GreeterDataMultiError(errors)
	}

	return nil
}

// GreeterDataMultiError is an error wrapping multiple validation errors
// returned by GreeterData.ValidateAll() if the designated constraints aren't met.
type GreeterDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GreeterDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GreeterDataMultiError) AllErrors() []error { return m }

// GreeterDataValidationError is the validation error returned by
// GreeterData.Validate if the designated constraints aren't met.
type GreeterDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GreeterDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GreeterDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GreeterDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GreeterDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GreeterDataValidationError) ErrorName() string { return "GreeterDataValidationError" }

// Error satisfies the builtin error interface
func (e GreeterDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGreeterData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GreeterDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GreeterDataValidationError{}

// Validate checks the field values on GreeterRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GreeterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GreeterRequestMultiError,
// or nil if none found.
func (m *GreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GreeterRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GreeterRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GreeterRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GreeterRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GreeterRequestMultiError(errors)
	}

	return nil
}

// GreeterRequestMultiError is an error wrapping multiple validation errors
// returned by GreeterRequest.ValidateAll() if the designated constraints
// aren't met.
type GreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GreeterRequestMultiError) AllErrors() []error { return m }

// GreeterRequestValidationError is the validation error returned by
// GreeterRequest.Validate if the designated constraints aren't met.
type GreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GreeterRequestValidationError) ErrorName() string { return "GreeterRequestValidationError" }

// Error satisfies the builtin error interface
func (e GreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GreeterRequestValidationError{}

// Validate checks the field values on GreeterReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GreeterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GreeterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GreeterReplyMultiError, or
// nil if none found.
func (m *GreeterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GreeterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GreeterReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GreeterReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GreeterReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GreeterReplyMultiError(errors)
	}

	return nil
}

// GreeterReplyMultiError is an error wrapping multiple validation errors
// returned by GreeterReply.ValidateAll() if the designated constraints aren't met.
type GreeterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GreeterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GreeterReplyMultiError) AllErrors() []error { return m }

// GreeterReplyValidationError is the validation error returned by
// GreeterReply.Validate if the designated constraints aren't met.
type GreeterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GreeterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GreeterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GreeterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GreeterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GreeterReplyValidationError) ErrorName() string { return "GreeterReplyValidationError" }

// Error satisfies the builtin error interface
func (e GreeterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGreeterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GreeterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GreeterReplyValidationError{}

// Validate checks the field values on CreateGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGreeterRequestMultiError, or nil if none found.
func (m *CreateGreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGreeterRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGreeterRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGreeterRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGreeterRequestMultiError(errors)
	}

	return nil
}

// CreateGreeterRequestMultiError is an error wrapping multiple validation
// errors returned by CreateGreeterRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateGreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGreeterRequestMultiError) AllErrors() []error { return m }

// CreateGreeterRequestValidationError is the validation error returned by
// CreateGreeterRequest.Validate if the designated constraints aren't met.
type CreateGreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGreeterRequestValidationError) ErrorName() string {
	return "CreateGreeterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGreeterRequestValidationError{}

// Validate checks the field values on CreateGreeterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGreeterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGreeterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGreeterReplyMultiError, or nil if none found.
func (m *CreateGreeterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGreeterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateGreeterReplyMultiError(errors)
	}

	return nil
}

// CreateGreeterReplyMultiError is an error wrapping multiple validation errors
// returned by CreateGreeterReply.ValidateAll() if the designated constraints
// aren't met.
type CreateGreeterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGreeterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGreeterReplyMultiError) AllErrors() []error { return m }

// CreateGreeterReplyValidationError is the validation error returned by
// CreateGreeterReply.Validate if the designated constraints aren't met.
type CreateGreeterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGreeterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGreeterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGreeterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGreeterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGreeterReplyValidationError) ErrorName() string {
	return "CreateGreeterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGreeterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGreeterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGreeterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGreeterReplyValidationError{}

// Validate checks the field values on UpdateGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGreeterRequestMultiError, or nil if none found.
func (m *UpdateGreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGreeterRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGreeterRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGreeterRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGreeterRequestMultiError(errors)
	}

	return nil
}

// UpdateGreeterRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateGreeterRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateGreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGreeterRequestMultiError) AllErrors() []error { return m }

// UpdateGreeterRequestValidationError is the validation error returned by
// UpdateGreeterRequest.Validate if the designated constraints aren't met.
type UpdateGreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGreeterRequestValidationError) ErrorName() string {
	return "UpdateGreeterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGreeterRequestValidationError{}

// Validate checks the field values on UpdateGreeterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGreeterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGreeterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGreeterReplyMultiError, or nil if none found.
func (m *UpdateGreeterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGreeterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateGreeterReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateGreeterReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateGreeterReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateGreeterReplyMultiError(errors)
	}

	return nil
}

// UpdateGreeterReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateGreeterReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateGreeterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGreeterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGreeterReplyMultiError) AllErrors() []error { return m }

// UpdateGreeterReplyValidationError is the validation error returned by
// UpdateGreeterReply.Validate if the designated constraints aren't met.
type UpdateGreeterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGreeterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGreeterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGreeterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGreeterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGreeterReplyValidationError) ErrorName() string {
	return "UpdateGreeterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGreeterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGreeterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGreeterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGreeterReplyValidationError{}

// Validate checks the field values on DeleteGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGreeterRequestMultiError, or nil if none found.
func (m *DeleteGreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteGreeterRequestMultiError(errors)
	}

	return nil
}

// DeleteGreeterRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteGreeterRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteGreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGreeterRequestMultiError) AllErrors() []error { return m }

// DeleteGreeterRequestValidationError is the validation error returned by
// DeleteGreeterRequest.Validate if the designated constraints aren't met.
type DeleteGreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGreeterRequestValidationError) ErrorName() string {
	return "DeleteGreeterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGreeterRequestValidationError{}

// Validate checks the field values on DeleteGreeterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGreeterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGreeterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGreeterReplyMultiError, or nil if none found.
func (m *DeleteGreeterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGreeterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteGreeterReplyMultiError(errors)
	}

	return nil
}

// DeleteGreeterReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteGreeterReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteGreeterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGreeterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGreeterReplyMultiError) AllErrors() []error { return m }

// DeleteGreeterReplyValidationError is the validation error returned by
// DeleteGreeterReply.Validate if the designated constraints aren't met.
type DeleteGreeterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGreeterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGreeterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGreeterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGreeterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGreeterReplyValidationError) ErrorName() string {
	return "DeleteGreeterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGreeterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGreeterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGreeterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGreeterReplyValidationError{}

// Validate checks the field values on GetGreeterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGreeterRequestMultiError, or nil if none found.
func (m *GetGreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetGreeterRequestMultiError(errors)
	}

	return nil
}

// GetGreeterRequestMultiError is an error wrapping multiple validation errors
// returned by GetGreeterRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGreeterRequestMultiError) AllErrors() []error { return m }

// GetGreeterRequestValidationError is the validation error returned by
// GetGreeterRequest.Validate if the designated constraints aren't met.
type GetGreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGreeterRequestValidationError) ErrorName() string {
	return "GetGreeterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGreeterRequestValidationError{}

// Validate checks the field values on GetGreeterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGreeterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGreeterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGreeterReplyMultiError, or nil if none found.
func (m *GetGreeterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGreeterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGreeterReplyMultiError(errors)
	}

	return nil
}

// GetGreeterReplyMultiError is an error wrapping multiple validation errors
// returned by GetGreeterReply.ValidateAll() if the designated constraints
// aren't met.
type GetGreeterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGreeterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGreeterReplyMultiError) AllErrors() []error { return m }

// GetGreeterReplyValidationError is the validation error returned by
// GetGreeterReply.Validate if the designated constraints aren't met.
type GetGreeterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGreeterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGreeterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGreeterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGreeterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGreeterReplyValidationError) ErrorName() string { return "GetGreeterReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetGreeterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGreeterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGreeterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGreeterReplyValidationError{}

// Validate checks the field values on ListGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGreeterRequestMultiError, or nil if none found.
func (m *ListGreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Current != nil {
		// no validation rules for Current
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.NoPaging != nil {
		// no validation rules for NoPaging
	}

	if len(errors) > 0 {
		return ListGreeterRequestMultiError(errors)
	}

	return nil
}

// ListGreeterRequestMultiError is an error wrapping multiple validation errors
// returned by ListGreeterRequest.ValidateAll() if the designated constraints
// aren't met.
type ListGreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGreeterRequestMultiError) AllErrors() []error { return m }

// ListGreeterRequestValidationError is the validation error returned by
// ListGreeterRequest.Validate if the designated constraints aren't met.
type ListGreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGreeterRequestValidationError) ErrorName() string {
	return "ListGreeterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGreeterRequestValidationError{}

// Validate checks the field values on ListGreeterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGreeterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGreeterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGreeterReplyMultiError, or nil if none found.
func (m *ListGreeterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGreeterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGreeterReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGreeterReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGreeterReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGreeterReplyValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGreeterReplyValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGreeterReplyValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Extra != nil {

		if all {
			switch v := interface{}(m.GetExtra()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGreeterReplyValidationError{
						field:  "Extra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGreeterReplyValidationError{
						field:  "Extra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGreeterReplyValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGreeterReplyMultiError(errors)
	}

	return nil
}

// ListGreeterReplyMultiError is an error wrapping multiple validation errors
// returned by ListGreeterReply.ValidateAll() if the designated constraints
// aren't met.
type ListGreeterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGreeterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGreeterReplyMultiError) AllErrors() []error { return m }

// ListGreeterReplyValidationError is the validation error returned by
// ListGreeterReply.Validate if the designated constraints aren't met.
type ListGreeterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGreeterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGreeterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGreeterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGreeterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGreeterReplyValidationError) ErrorName() string { return "ListGreeterReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListGreeterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGreeterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGreeterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGreeterReplyValidationError{}
