// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: helloworld/greeter.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HelloGreeterAPI_SayHello_FullMethodName      = "/api.v1.services.helloworld.HelloGreeterAPI/SayHello"
	HelloGreeterAPI_PostHello_FullMethodName     = "/api.v1.services.helloworld.HelloGreeterAPI/PostHello"
	HelloGreeterAPI_CreateGreeter_FullMethodName = "/api.v1.services.helloworld.HelloGreeterAPI/CreateGreeter"
	HelloGreeterAPI_UpdateGreeter_FullMethodName = "/api.v1.services.helloworld.HelloGreeterAPI/UpdateGreeter"
	HelloGreeterAPI_DeleteGreeter_FullMethodName = "/api.v1.services.helloworld.HelloGreeterAPI/DeleteGreeter"
	HelloGreeterAPI_GetGreeter_FullMethodName    = "/api.v1.services.helloworld.HelloGreeterAPI/GetGreeter"
	HelloGreeterAPI_ListGreeter_FullMethodName   = "/api.v1.services.helloworld.HelloGreeterAPI/ListGreeter"
)

// HelloGreeterAPIClient is the client API for HelloGreeterAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type HelloGreeterAPIClient interface {
	// SayHello is a get method
	SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error)
	// PostHello is a post method
	PostHello(ctx context.Context, in *PostHelloRequest, opts ...grpc.CallOption) (*PostHelloResponse, error)
	// CreateGreeter creates a new Greeter
	CreateGreeter(ctx context.Context, in *CreateGreeterRequest, opts ...grpc.CallOption) (*CreateGreeterResponse, error)
	// UpdateGreeter updates a Greeter
	UpdateGreeter(ctx context.Context, in *UpdateGreeterRequest, opts ...grpc.CallOption) (*UpdateGreeterResponse, error)
	// DeleteGreeter deletes a Greeter
	DeleteGreeter(ctx context.Context, in *DeleteGreeterRequest, opts ...grpc.CallOption) (*DeleteGreeterResponse, error)
	// GetGreeter gets a Greeter
	GetGreeter(ctx context.Context, in *GetGreeterRequest, opts ...grpc.CallOption) (*GetGreeterResponse, error)
	// ListGreeter lists Greeters
	ListGreeter(ctx context.Context, in *ListGreeterRequest, opts ...grpc.CallOption) (*ListGreeterResponse, error)
}

type helloGreeterAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloGreeterAPIClient(cc grpc.ClientConnInterface) HelloGreeterAPIClient {
	return &helloGreeterAPIClient{cc}
}

func (c *helloGreeterAPIClient) SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SayHelloResponse)
	err := c.cc.Invoke(ctx, HelloGreeterAPI_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloGreeterAPIClient) PostHello(ctx context.Context, in *PostHelloRequest, opts ...grpc.CallOption) (*PostHelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostHelloResponse)
	err := c.cc.Invoke(ctx, HelloGreeterAPI_PostHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloGreeterAPIClient) CreateGreeter(ctx context.Context, in *CreateGreeterRequest, opts ...grpc.CallOption) (*CreateGreeterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGreeterResponse)
	err := c.cc.Invoke(ctx, HelloGreeterAPI_CreateGreeter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloGreeterAPIClient) UpdateGreeter(ctx context.Context, in *UpdateGreeterRequest, opts ...grpc.CallOption) (*UpdateGreeterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGreeterResponse)
	err := c.cc.Invoke(ctx, HelloGreeterAPI_UpdateGreeter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloGreeterAPIClient) DeleteGreeter(ctx context.Context, in *DeleteGreeterRequest, opts ...grpc.CallOption) (*DeleteGreeterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGreeterResponse)
	err := c.cc.Invoke(ctx, HelloGreeterAPI_DeleteGreeter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloGreeterAPIClient) GetGreeter(ctx context.Context, in *GetGreeterRequest, opts ...grpc.CallOption) (*GetGreeterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGreeterResponse)
	err := c.cc.Invoke(ctx, HelloGreeterAPI_GetGreeter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloGreeterAPIClient) ListGreeter(ctx context.Context, in *ListGreeterRequest, opts ...grpc.CallOption) (*ListGreeterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGreeterResponse)
	err := c.cc.Invoke(ctx, HelloGreeterAPI_ListGreeter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloGreeterAPIServer is the server API for HelloGreeterAPI service.
// All implementations must embed UnimplementedHelloGreeterAPIServer
// for forward compatibility.
//
// The greeting service definition.
type HelloGreeterAPIServer interface {
	// SayHello is a get method
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
	// PostHello is a post method
	PostHello(context.Context, *PostHelloRequest) (*PostHelloResponse, error)
	// CreateGreeter creates a new Greeter
	CreateGreeter(context.Context, *CreateGreeterRequest) (*CreateGreeterResponse, error)
	// UpdateGreeter updates a Greeter
	UpdateGreeter(context.Context, *UpdateGreeterRequest) (*UpdateGreeterResponse, error)
	// DeleteGreeter deletes a Greeter
	DeleteGreeter(context.Context, *DeleteGreeterRequest) (*DeleteGreeterResponse, error)
	// GetGreeter gets a Greeter
	GetGreeter(context.Context, *GetGreeterRequest) (*GetGreeterResponse, error)
	// ListGreeter lists Greeters
	ListGreeter(context.Context, *ListGreeterRequest) (*ListGreeterResponse, error)
	mustEmbedUnimplementedHelloGreeterAPIServer()
}

// UnimplementedHelloGreeterAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHelloGreeterAPIServer struct{}

func (UnimplementedHelloGreeterAPIServer) SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedHelloGreeterAPIServer) PostHello(context.Context, *PostHelloRequest) (*PostHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostHello not implemented")
}
func (UnimplementedHelloGreeterAPIServer) CreateGreeter(context.Context, *CreateGreeterRequest) (*CreateGreeterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGreeter not implemented")
}
func (UnimplementedHelloGreeterAPIServer) UpdateGreeter(context.Context, *UpdateGreeterRequest) (*UpdateGreeterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGreeter not implemented")
}
func (UnimplementedHelloGreeterAPIServer) DeleteGreeter(context.Context, *DeleteGreeterRequest) (*DeleteGreeterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGreeter not implemented")
}
func (UnimplementedHelloGreeterAPIServer) GetGreeter(context.Context, *GetGreeterRequest) (*GetGreeterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGreeter not implemented")
}
func (UnimplementedHelloGreeterAPIServer) ListGreeter(context.Context, *ListGreeterRequest) (*ListGreeterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGreeter not implemented")
}
func (UnimplementedHelloGreeterAPIServer) mustEmbedUnimplementedHelloGreeterAPIServer() {}
func (UnimplementedHelloGreeterAPIServer) testEmbeddedByValue()                         {}

// UnsafeHelloGreeterAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloGreeterAPIServer will
// result in compilation errors.
type UnsafeHelloGreeterAPIServer interface {
	mustEmbedUnimplementedHelloGreeterAPIServer()
}

func RegisterHelloGreeterAPIServer(s grpc.ServiceRegistrar, srv HelloGreeterAPIServer) {
	// If the following call pancis, it indicates UnimplementedHelloGreeterAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HelloGreeterAPI_ServiceDesc, srv)
}

func _HelloGreeterAPI_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloGreeterAPIServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloGreeterAPI_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloGreeterAPIServer).SayHello(ctx, req.(*SayHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloGreeterAPI_PostHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloGreeterAPIServer).PostHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloGreeterAPI_PostHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloGreeterAPIServer).PostHello(ctx, req.(*PostHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloGreeterAPI_CreateGreeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGreeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloGreeterAPIServer).CreateGreeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloGreeterAPI_CreateGreeter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloGreeterAPIServer).CreateGreeter(ctx, req.(*CreateGreeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloGreeterAPI_UpdateGreeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGreeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloGreeterAPIServer).UpdateGreeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloGreeterAPI_UpdateGreeter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloGreeterAPIServer).UpdateGreeter(ctx, req.(*UpdateGreeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloGreeterAPI_DeleteGreeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGreeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloGreeterAPIServer).DeleteGreeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloGreeterAPI_DeleteGreeter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloGreeterAPIServer).DeleteGreeter(ctx, req.(*DeleteGreeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloGreeterAPI_GetGreeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGreeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloGreeterAPIServer).GetGreeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloGreeterAPI_GetGreeter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloGreeterAPIServer).GetGreeter(ctx, req.(*GetGreeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloGreeterAPI_ListGreeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGreeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloGreeterAPIServer).ListGreeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloGreeterAPI_ListGreeter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloGreeterAPIServer).ListGreeter(ctx, req.(*ListGreeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloGreeterAPI_ServiceDesc is the grpc.ServiceDesc for HelloGreeterAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloGreeterAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.services.helloworld.HelloGreeterAPI",
	HandlerType: (*HelloGreeterAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _HelloGreeterAPI_SayHello_Handler,
		},
		{
			MethodName: "PostHello",
			Handler:    _HelloGreeterAPI_PostHello_Handler,
		},
		{
			MethodName: "CreateGreeter",
			Handler:    _HelloGreeterAPI_CreateGreeter_Handler,
		},
		{
			MethodName: "UpdateGreeter",
			Handler:    _HelloGreeterAPI_UpdateGreeter_Handler,
		},
		{
			MethodName: "DeleteGreeter",
			Handler:    _HelloGreeterAPI_DeleteGreeter_Handler,
		},
		{
			MethodName: "GetGreeter",
			Handler:    _HelloGreeterAPI_GetGreeter_Handler,
		},
		{
			MethodName: "ListGreeter",
			Handler:    _HelloGreeterAPI_ListGreeter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/greeter.proto",
}
