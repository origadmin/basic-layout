// Code generated by protoc-gen-go-gin. DO NOT EDIT.
// versions:
// - protoc-gen-go-gin v1.0.0
// - protoc             v5.27.2
// source: v1/protos/helloworld/greeter.proto

package helloworld

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	gins "github.com/origadmin/toolkits/runtime/kratos/transport/gins"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = new(gin.H)
var _ = gins.NewContext
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const Greeter_CreateGreeter_OperationName = "/api.v1.services.helloworld.Greeter/CreateGreeter"
const Greeter_DeleteGreeter_OperationName = "/api.v1.services.helloworld.Greeter/DeleteGreeter"
const Greeter_GetGreeter_OperationName = "/api.v1.services.helloworld.Greeter/GetGreeter"
const Greeter_ListGreeter_OperationName = "/api.v1.services.helloworld.Greeter/ListGreeter"
const Greeter_PostHello_OperationName = "/api.v1.services.helloworld.Greeter/PostHello"
const Greeter_SayHello_OperationName = "/api.v1.services.helloworld.Greeter/SayHello"
const Greeter_UpdateGreeter_OperationName = "/api.v1.services.helloworld.Greeter/UpdateGreeter"

type GreeterGINServer interface {
	// CreateGreeter CreateGreeter creates a new Greeter
	CreateGreeter(context.Context, *CreateGreeterRequest) (*CreateGreeterReply, error)
	// DeleteGreeter DeleteGreeter deletes a Greeter
	DeleteGreeter(context.Context, *DeleteGreeterRequest) (*DeleteGreeterReply, error)
	// GetGreeter GetGreeter gets a Greeter
	GetGreeter(context.Context, *GetGreeterRequest) (*GetGreeterReply, error)
	// ListGreeter ListGreeter lists Greeters
	ListGreeter(context.Context, *ListGreeterRequest) (*ListGreeterReply, error)
	// PostHello PostHello is a post method
	PostHello(context.Context, *GreeterRequest) (*GreeterReply, error)
	// SayHello SayHello is a get method
	SayHello(context.Context, *GreeterRequest) (*GreeterReply, error)
	// UpdateGreeter UpdateGreeter updates a Greeter
	UpdateGreeter(context.Context, *UpdateGreeterRequest) (*UpdateGreeterReply, error)
}

func RegisterGreeterGINServer(router gin.IRouter, srv GreeterGINServer) {
	router.GET("/api/v1/greeter/:id/hello", _Greeter_SayHello0_GIN_Handler(srv))
	router.POST("/api/v1/greeter/:id/hello", _Greeter_PostHello0_GIN_Handler(srv))
	router.POST("/api/v1/greeter", _Greeter_CreateGreeter0_GIN_Handler(srv))
	router.PUT("/api/v1/greeter/:id", _Greeter_UpdateGreeter0_GIN_Handler(srv))
	router.DELETE("/api/v1/greeter/:id", _Greeter_DeleteGreeter0_GIN_Handler(srv))
	router.GET("/api/v1/greeter/:id", _Greeter_GetGreeter0_GIN_Handler(srv))
	router.GET("/api/v1/greeter", _Greeter_ListGreeter0_GIN_Handler(srv))
}

func _Greeter_SayHello0_GIN_Handler(srv GreeterGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in GreeterRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		http.SetOperation(ctx, Greeter_SayHello_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.SayHello(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
		return
	}
}

func _Greeter_PostHello0_GIN_Handler(srv GreeterGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in GreeterRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		http.SetOperation(ctx, Greeter_PostHello_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.PostHello(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply.Data)
		return
	}
}

func _Greeter_CreateGreeter0_GIN_Handler(srv GreeterGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in CreateGreeterRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		http.SetOperation(ctx, Greeter_CreateGreeter_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.CreateGreeter(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
		return
	}
}

func _Greeter_UpdateGreeter0_GIN_Handler(srv GreeterGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in UpdateGreeterRequest
		if err := gins.BindBody(ctx, &in.Data); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		http.SetOperation(ctx, Greeter_UpdateGreeter_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.UpdateGreeter(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
		return
	}
}

func _Greeter_DeleteGreeter0_GIN_Handler(srv GreeterGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in DeleteGreeterRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		http.SetOperation(ctx, Greeter_DeleteGreeter_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.DeleteGreeter(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
		return
	}
}

func _Greeter_GetGreeter0_GIN_Handler(srv GreeterGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in GetGreeterRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		if err := gins.BindURI(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		http.SetOperation(ctx, Greeter_GetGreeter_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.GetGreeter(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
		return
	}
}

func _Greeter_ListGreeter0_GIN_Handler(srv GreeterGINServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in ListGreeterRequest
		if err := gins.BindQuery(ctx, &in); err != nil {
			ctx.Error(err)
			return
		}
		http.SetOperation(ctx, Greeter_ListGreeter_OperationName)
		newCtx := gins.NewContext(ctx)
		reply, err := srv.ListGreeter(newCtx, &in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
		return
	}
}

type GreeterGINClient interface {
	CreateGreeter(ctx context.Context, req *CreateGreeterRequest, opts ...http.CallOption) (rsp *CreateGreeterReply, err error)
	DeleteGreeter(ctx context.Context, req *DeleteGreeterRequest, opts ...http.CallOption) (rsp *DeleteGreeterReply, err error)
	GetGreeter(ctx context.Context, req *GetGreeterRequest, opts ...http.CallOption) (rsp *GetGreeterReply, err error)
	ListGreeter(ctx context.Context, req *ListGreeterRequest, opts ...http.CallOption) (rsp *ListGreeterReply, err error)
	PostHello(ctx context.Context, req *GreeterRequest, opts ...http.CallOption) (rsp *GreeterReply, err error)
	SayHello(ctx context.Context, req *GreeterRequest, opts ...http.CallOption) (rsp *GreeterReply, err error)
	UpdateGreeter(ctx context.Context, req *UpdateGreeterRequest, opts ...http.CallOption) (rsp *UpdateGreeterReply, err error)
}

type GreeterGINClientImpl struct {
	cc *http.Client
}

func NewGreeterGINClient(client *http.Client) GreeterGINClient {
	return &GreeterGINClientImpl{client}
}

func (c *GreeterGINClientImpl) CreateGreeter(ctx context.Context, in *CreateGreeterRequest, opts ...http.CallOption) (*CreateGreeterReply, error) {
	var out CreateGreeterReply
	pattern := "/api/v1/greeter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(Greeter_CreateGreeter_OperationName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterGINClientImpl) DeleteGreeter(ctx context.Context, in *DeleteGreeterRequest, opts ...http.CallOption) (*DeleteGreeterReply, error) {
	var out DeleteGreeterReply
	pattern := "/api/v1/greeter/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(Greeter_DeleteGreeter_OperationName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterGINClientImpl) GetGreeter(ctx context.Context, in *GetGreeterRequest, opts ...http.CallOption) (*GetGreeterReply, error) {
	var out GetGreeterReply
	pattern := "/api/v1/greeter/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(Greeter_GetGreeter_OperationName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterGINClientImpl) ListGreeter(ctx context.Context, in *ListGreeterRequest, opts ...http.CallOption) (*ListGreeterReply, error) {
	var out ListGreeterReply
	pattern := "/api/v1/greeter"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(Greeter_ListGreeter_OperationName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterGINClientImpl) PostHello(ctx context.Context, in *GreeterRequest, opts ...http.CallOption) (*GreeterReply, error) {
	var out GreeterReply
	pattern := "/api/v1/greeter/{id}/hello"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(Greeter_PostHello_OperationName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out.Data, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterGINClientImpl) SayHello(ctx context.Context, in *GreeterRequest, opts ...http.CallOption) (*GreeterReply, error) {
	var out GreeterReply
	pattern := "/api/v1/greeter/{id}/hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(Greeter_SayHello_OperationName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterGINClientImpl) UpdateGreeter(ctx context.Context, in *UpdateGreeterRequest, opts ...http.CallOption) (*UpdateGreeterReply, error) {
	var out UpdateGreeterReply
	pattern := "/api/v1/greeter/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(Greeter_UpdateGreeter_OperationName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
