// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             (unknown)
// source: helloworld/greeter.proto

package helloworld

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGreeterAPICreateGreeter = "/api.v1.services.helloworld.GreeterAPI/CreateGreeter"
const OperationGreeterAPIDeleteGreeter = "/api.v1.services.helloworld.GreeterAPI/DeleteGreeter"
const OperationGreeterAPIGetGreeter = "/api.v1.services.helloworld.GreeterAPI/GetGreeter"
const OperationGreeterAPIListGreeter = "/api.v1.services.helloworld.GreeterAPI/ListGreeter"
const OperationGreeterAPIPostHello = "/api.v1.services.helloworld.GreeterAPI/PostHello"
const OperationGreeterAPISayHello = "/api.v1.services.helloworld.GreeterAPI/SayHello"
const OperationGreeterAPIUpdateGreeter = "/api.v1.services.helloworld.GreeterAPI/UpdateGreeter"

type GreeterAPIHTTPServer interface {
	// CreateGreeter CreateGreeter creates a new Greeter
	CreateGreeter(context.Context, *CreateGreeterRequest) (*CreateGreeterResponse, error)
	// DeleteGreeter DeleteGreeter deletes a Greeter
	DeleteGreeter(context.Context, *DeleteGreeterRequest) (*DeleteGreeterResponse, error)
	// GetGreeter GetGreeter gets a Greeter
	GetGreeter(context.Context, *GetGreeterRequest) (*GetGreeterResponse, error)
	// ListGreeter ListGreeter lists Greeters
	ListGreeter(context.Context, *ListGreeterRequest) (*ListGreeterResponse, error)
	// PostHello PostHello is a post method
	PostHello(context.Context, *PostHelloRequest) (*PostHelloResponse, error)
	// SayHello SayHello is a get method
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
	// UpdateGreeter UpdateGreeter updates a Greeter
	UpdateGreeter(context.Context, *UpdateGreeterRequest) (*UpdateGreeterResponse, error)
}

func RegisterGreeterAPIHTTPServer(s *http.Server, srv GreeterAPIHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/greeter/{id}/hello", _GreeterAPI_SayHello0_HTTP_Handler(srv))
	r.POST("/api/v1/greeter/{id}/hello", _GreeterAPI_PostHello0_HTTP_Handler(srv))
	r.POST("/api/v1/greeter", _GreeterAPI_CreateGreeter0_HTTP_Handler(srv))
	r.PUT("/api/v1/greeter/{id}", _GreeterAPI_UpdateGreeter0_HTTP_Handler(srv))
	r.DELETE("/api/v1/greeter/{id}", _GreeterAPI_DeleteGreeter0_HTTP_Handler(srv))
	r.GET("/api/v1/greeter/{id}", _GreeterAPI_GetGreeter0_HTTP_Handler(srv))
	r.GET("/api/v1/greeter", _GreeterAPI_ListGreeter0_HTTP_Handler(srv))
}

func _GreeterAPI_SayHello0_HTTP_Handler(srv GreeterAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SayHelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterAPISayHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*SayHelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SayHelloResponse)
		return ctx.Result(200, reply)
	}
}

func _GreeterAPI_PostHello0_HTTP_Handler(srv GreeterAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PostHelloRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterAPIPostHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PostHello(ctx, req.(*PostHelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PostHelloResponse)
		return ctx.Result(200, reply.Data)
	}
}

func _GreeterAPI_CreateGreeter0_HTTP_Handler(srv GreeterAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateGreeterRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterAPICreateGreeter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateGreeter(ctx, req.(*CreateGreeterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateGreeterResponse)
		return ctx.Result(200, reply)
	}
}

func _GreeterAPI_UpdateGreeter0_HTTP_Handler(srv GreeterAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGreeterRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterAPIUpdateGreeter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGreeter(ctx, req.(*UpdateGreeterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateGreeterResponse)
		return ctx.Result(200, reply)
	}
}

func _GreeterAPI_DeleteGreeter0_HTTP_Handler(srv GreeterAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteGreeterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterAPIDeleteGreeter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGreeter(ctx, req.(*DeleteGreeterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteGreeterResponse)
		return ctx.Result(200, reply)
	}
}

func _GreeterAPI_GetGreeter0_HTTP_Handler(srv GreeterAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGreeterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterAPIGetGreeter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGreeter(ctx, req.(*GetGreeterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGreeterResponse)
		return ctx.Result(200, reply)
	}
}

func _GreeterAPI_ListGreeter0_HTTP_Handler(srv GreeterAPIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGreeterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterAPIListGreeter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGreeter(ctx, req.(*ListGreeterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGreeterResponse)
		return ctx.Result(200, reply)
	}
}

type GreeterAPIHTTPClient interface {
	CreateGreeter(ctx context.Context, req *CreateGreeterRequest, opts ...http.CallOption) (rsp *CreateGreeterResponse, err error)
	DeleteGreeter(ctx context.Context, req *DeleteGreeterRequest, opts ...http.CallOption) (rsp *DeleteGreeterResponse, err error)
	GetGreeter(ctx context.Context, req *GetGreeterRequest, opts ...http.CallOption) (rsp *GetGreeterResponse, err error)
	ListGreeter(ctx context.Context, req *ListGreeterRequest, opts ...http.CallOption) (rsp *ListGreeterResponse, err error)
	PostHello(ctx context.Context, req *PostHelloRequest, opts ...http.CallOption) (rsp *PostHelloResponse, err error)
	SayHello(ctx context.Context, req *SayHelloRequest, opts ...http.CallOption) (rsp *SayHelloResponse, err error)
	UpdateGreeter(ctx context.Context, req *UpdateGreeterRequest, opts ...http.CallOption) (rsp *UpdateGreeterResponse, err error)
}

type GreeterAPIHTTPClientImpl struct {
	cc *http.Client
}

func NewGreeterAPIHTTPClient(client *http.Client) GreeterAPIHTTPClient {
	return &GreeterAPIHTTPClientImpl{client}
}

func (c *GreeterAPIHTTPClientImpl) CreateGreeter(ctx context.Context, in *CreateGreeterRequest, opts ...http.CallOption) (*CreateGreeterResponse, error) {
	var out CreateGreeterResponse
	pattern := "/api/v1/greeter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterAPICreateGreeter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterAPIHTTPClientImpl) DeleteGreeter(ctx context.Context, in *DeleteGreeterRequest, opts ...http.CallOption) (*DeleteGreeterResponse, error) {
	var out DeleteGreeterResponse
	pattern := "/api/v1/greeter/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterAPIDeleteGreeter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterAPIHTTPClientImpl) GetGreeter(ctx context.Context, in *GetGreeterRequest, opts ...http.CallOption) (*GetGreeterResponse, error) {
	var out GetGreeterResponse
	pattern := "/api/v1/greeter/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterAPIGetGreeter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterAPIHTTPClientImpl) ListGreeter(ctx context.Context, in *ListGreeterRequest, opts ...http.CallOption) (*ListGreeterResponse, error) {
	var out ListGreeterResponse
	pattern := "/api/v1/greeter"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterAPIListGreeter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterAPIHTTPClientImpl) PostHello(ctx context.Context, in *PostHelloRequest, opts ...http.CallOption) (*PostHelloResponse, error) {
	var out PostHelloResponse
	pattern := "/api/v1/greeter/{id}/hello"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterAPIPostHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out.Data, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterAPIHTTPClientImpl) SayHello(ctx context.Context, in *SayHelloRequest, opts ...http.CallOption) (*SayHelloResponse, error) {
	var out SayHelloResponse
	pattern := "/api/v1/greeter/{id}/hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterAPISayHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterAPIHTTPClientImpl) UpdateGreeter(ctx context.Context, in *UpdateGreeterRequest, opts ...http.CallOption) (*UpdateGreeterResponse, error) {
	var out UpdateGreeterResponse
	pattern := "/api/v1/greeter/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterAPIUpdateGreeter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
