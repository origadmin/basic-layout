// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: secondworld/greeter.proto

package secondworld

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GreeterData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GreeterData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GreeterData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GreeterDataMultiError, or
// nil if none found.
func (m *GreeterData) ValidateAll() error {
	return m.validate(true)
}

func (m *GreeterData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GreeterDataMultiError(errors)
	}

	return nil
}

// GreeterDataMultiError is an error wrapping multiple validation errors
// returned by GreeterData.ValidateAll() if the designated constraints aren't met.
type GreeterDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GreeterDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GreeterDataMultiError) AllErrors() []error { return m }

// GreeterDataValidationError is the validation error returned by
// GreeterData.Validate if the designated constraints aren't met.
type GreeterDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GreeterDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GreeterDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GreeterDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GreeterDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GreeterDataValidationError) ErrorName() string { return "GreeterDataValidationError" }

// Error satisfies the builtin error interface
func (e GreeterDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGreeterData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GreeterDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GreeterDataValidationError{}

// Validate checks the field values on SayHelloRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SayHelloRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SayHelloRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SayHelloRequestMultiError, or nil if none found.
func (m *SayHelloRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SayHelloRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SayHelloRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SayHelloRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SayHelloRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SayHelloRequestMultiError(errors)
	}

	return nil
}

// SayHelloRequestMultiError is an error wrapping multiple validation errors
// returned by SayHelloRequest.ValidateAll() if the designated constraints
// aren't met.
type SayHelloRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SayHelloRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SayHelloRequestMultiError) AllErrors() []error { return m }

// SayHelloRequestValidationError is the validation error returned by
// SayHelloRequest.Validate if the designated constraints aren't met.
type SayHelloRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SayHelloRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SayHelloRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SayHelloRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SayHelloRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SayHelloRequestValidationError) ErrorName() string { return "SayHelloRequestValidationError" }

// Error satisfies the builtin error interface
func (e SayHelloRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSayHelloRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SayHelloRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SayHelloRequestValidationError{}

// Validate checks the field values on SayHelloResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SayHelloResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SayHelloResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SayHelloResponseMultiError, or nil if none found.
func (m *SayHelloResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SayHelloResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SayHelloResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SayHelloResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SayHelloResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SayHelloResponseMultiError(errors)
	}

	return nil
}

// SayHelloResponseMultiError is an error wrapping multiple validation errors
// returned by SayHelloResponse.ValidateAll() if the designated constraints
// aren't met.
type SayHelloResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SayHelloResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SayHelloResponseMultiError) AllErrors() []error { return m }

// SayHelloResponseValidationError is the validation error returned by
// SayHelloResponse.Validate if the designated constraints aren't met.
type SayHelloResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SayHelloResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SayHelloResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SayHelloResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SayHelloResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SayHelloResponseValidationError) ErrorName() string { return "SayHelloResponseValidationError" }

// Error satisfies the builtin error interface
func (e SayHelloResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSayHelloResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SayHelloResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SayHelloResponseValidationError{}

// Validate checks the field values on PostHelloRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PostHelloRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostHelloRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostHelloRequestMultiError, or nil if none found.
func (m *PostHelloRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PostHelloRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostHelloRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostHelloRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostHelloRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostHelloRequestMultiError(errors)
	}

	return nil
}

// PostHelloRequestMultiError is an error wrapping multiple validation errors
// returned by PostHelloRequest.ValidateAll() if the designated constraints
// aren't met.
type PostHelloRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostHelloRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostHelloRequestMultiError) AllErrors() []error { return m }

// PostHelloRequestValidationError is the validation error returned by
// PostHelloRequest.Validate if the designated constraints aren't met.
type PostHelloRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostHelloRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostHelloRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostHelloRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostHelloRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostHelloRequestValidationError) ErrorName() string { return "PostHelloRequestValidationError" }

// Error satisfies the builtin error interface
func (e PostHelloRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostHelloRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostHelloRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostHelloRequestValidationError{}

// Validate checks the field values on PostHelloResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PostHelloResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostHelloResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostHelloResponseMultiError, or nil if none found.
func (m *PostHelloResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PostHelloResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostHelloResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostHelloResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostHelloResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostHelloResponseMultiError(errors)
	}

	return nil
}

// PostHelloResponseMultiError is an error wrapping multiple validation errors
// returned by PostHelloResponse.ValidateAll() if the designated constraints
// aren't met.
type PostHelloResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostHelloResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostHelloResponseMultiError) AllErrors() []error { return m }

// PostHelloResponseValidationError is the validation error returned by
// PostHelloResponse.Validate if the designated constraints aren't met.
type PostHelloResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostHelloResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostHelloResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostHelloResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostHelloResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostHelloResponseValidationError) ErrorName() string {
	return "PostHelloResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostHelloResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostHelloResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostHelloResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostHelloResponseValidationError{}

// Validate checks the field values on CreateGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGreeterRequestMultiError, or nil if none found.
func (m *CreateGreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGreeterRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGreeterRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGreeterRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGreeterRequestMultiError(errors)
	}

	return nil
}

// CreateGreeterRequestMultiError is an error wrapping multiple validation
// errors returned by CreateGreeterRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateGreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGreeterRequestMultiError) AllErrors() []error { return m }

// CreateGreeterRequestValidationError is the validation error returned by
// CreateGreeterRequest.Validate if the designated constraints aren't met.
type CreateGreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGreeterRequestValidationError) ErrorName() string {
	return "CreateGreeterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGreeterRequestValidationError{}

// Validate checks the field values on CreateGreeterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGreeterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGreeterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGreeterResponseMultiError, or nil if none found.
func (m *CreateGreeterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGreeterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateGreeterResponseMultiError(errors)
	}

	return nil
}

// CreateGreeterResponseMultiError is an error wrapping multiple validation
// errors returned by CreateGreeterResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateGreeterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGreeterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGreeterResponseMultiError) AllErrors() []error { return m }

// CreateGreeterResponseValidationError is the validation error returned by
// CreateGreeterResponse.Validate if the designated constraints aren't met.
type CreateGreeterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGreeterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGreeterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGreeterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGreeterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGreeterResponseValidationError) ErrorName() string {
	return "CreateGreeterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGreeterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGreeterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGreeterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGreeterResponseValidationError{}

// Validate checks the field values on UpdateGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGreeterRequestMultiError, or nil if none found.
func (m *UpdateGreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGreeterRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGreeterRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGreeterRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGreeterRequestMultiError(errors)
	}

	return nil
}

// UpdateGreeterRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateGreeterRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateGreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGreeterRequestMultiError) AllErrors() []error { return m }

// UpdateGreeterRequestValidationError is the validation error returned by
// UpdateGreeterRequest.Validate if the designated constraints aren't met.
type UpdateGreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGreeterRequestValidationError) ErrorName() string {
	return "UpdateGreeterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGreeterRequestValidationError{}

// Validate checks the field values on UpdateGreeterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGreeterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGreeterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGreeterResponseMultiError, or nil if none found.
func (m *UpdateGreeterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGreeterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateGreeterResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateGreeterResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateGreeterResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateGreeterResponseMultiError(errors)
	}

	return nil
}

// UpdateGreeterResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateGreeterResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateGreeterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGreeterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGreeterResponseMultiError) AllErrors() []error { return m }

// UpdateGreeterResponseValidationError is the validation error returned by
// UpdateGreeterResponse.Validate if the designated constraints aren't met.
type UpdateGreeterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGreeterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGreeterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGreeterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGreeterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGreeterResponseValidationError) ErrorName() string {
	return "UpdateGreeterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGreeterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGreeterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGreeterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGreeterResponseValidationError{}

// Validate checks the field values on DeleteGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGreeterRequestMultiError, or nil if none found.
func (m *DeleteGreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteGreeterRequestMultiError(errors)
	}

	return nil
}

// DeleteGreeterRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteGreeterRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteGreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGreeterRequestMultiError) AllErrors() []error { return m }

// DeleteGreeterRequestValidationError is the validation error returned by
// DeleteGreeterRequest.Validate if the designated constraints aren't met.
type DeleteGreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGreeterRequestValidationError) ErrorName() string {
	return "DeleteGreeterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGreeterRequestValidationError{}

// Validate checks the field values on DeleteGreeterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGreeterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGreeterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGreeterResponseMultiError, or nil if none found.
func (m *DeleteGreeterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGreeterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteGreeterResponseMultiError(errors)
	}

	return nil
}

// DeleteGreeterResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteGreeterResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteGreeterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGreeterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGreeterResponseMultiError) AllErrors() []error { return m }

// DeleteGreeterResponseValidationError is the validation error returned by
// DeleteGreeterResponse.Validate if the designated constraints aren't met.
type DeleteGreeterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGreeterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGreeterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGreeterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGreeterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGreeterResponseValidationError) ErrorName() string {
	return "DeleteGreeterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGreeterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGreeterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGreeterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGreeterResponseValidationError{}

// Validate checks the field values on GetGreeterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGreeterRequestMultiError, or nil if none found.
func (m *GetGreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetGreeterRequestMultiError(errors)
	}

	return nil
}

// GetGreeterRequestMultiError is an error wrapping multiple validation errors
// returned by GetGreeterRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGreeterRequestMultiError) AllErrors() []error { return m }

// GetGreeterRequestValidationError is the validation error returned by
// GetGreeterRequest.Validate if the designated constraints aren't met.
type GetGreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGreeterRequestValidationError) ErrorName() string {
	return "GetGreeterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGreeterRequestValidationError{}

// Validate checks the field values on GetGreeterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGreeterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGreeterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGreeterResponseMultiError, or nil if none found.
func (m *GetGreeterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGreeterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGreeterResponseMultiError(errors)
	}

	return nil
}

// GetGreeterResponseMultiError is an error wrapping multiple validation errors
// returned by GetGreeterResponse.ValidateAll() if the designated constraints
// aren't met.
type GetGreeterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGreeterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGreeterResponseMultiError) AllErrors() []error { return m }

// GetGreeterResponseValidationError is the validation error returned by
// GetGreeterResponse.Validate if the designated constraints aren't met.
type GetGreeterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGreeterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGreeterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGreeterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGreeterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGreeterResponseValidationError) ErrorName() string {
	return "GetGreeterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGreeterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGreeterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGreeterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGreeterResponseValidationError{}

// Validate checks the field values on ListGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGreeterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGreeterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGreeterRequestMultiError, or nil if none found.
func (m *ListGreeterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGreeterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Current != nil {
		// no validation rules for Current
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.NoPaging != nil {
		// no validation rules for NoPaging
	}

	if len(errors) > 0 {
		return ListGreeterRequestMultiError(errors)
	}

	return nil
}

// ListGreeterRequestMultiError is an error wrapping multiple validation errors
// returned by ListGreeterRequest.ValidateAll() if the designated constraints
// aren't met.
type ListGreeterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGreeterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGreeterRequestMultiError) AllErrors() []error { return m }

// ListGreeterRequestValidationError is the validation error returned by
// ListGreeterRequest.Validate if the designated constraints aren't met.
type ListGreeterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGreeterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGreeterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGreeterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGreeterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGreeterRequestValidationError) ErrorName() string {
	return "ListGreeterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGreeterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGreeterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGreeterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGreeterRequestValidationError{}

// Validate checks the field values on ListGreeterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGreeterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGreeterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGreeterResponseMultiError, or nil if none found.
func (m *ListGreeterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGreeterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGreeterResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGreeterResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGreeterResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGreeterResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGreeterResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGreeterResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Extra != nil {

		if all {
			switch v := interface{}(m.GetExtra()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGreeterResponseValidationError{
						field:  "Extra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGreeterResponseValidationError{
						field:  "Extra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGreeterResponseValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGreeterResponseMultiError(errors)
	}

	return nil
}

// ListGreeterResponseMultiError is an error wrapping multiple validation
// errors returned by ListGreeterResponse.ValidateAll() if the designated
// constraints aren't met.
type ListGreeterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGreeterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGreeterResponseMultiError) AllErrors() []error { return m }

// ListGreeterResponseValidationError is the validation error returned by
// ListGreeterResponse.Validate if the designated constraints aren't met.
type ListGreeterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGreeterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGreeterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGreeterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGreeterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGreeterResponseValidationError) ErrorName() string {
	return "ListGreeterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGreeterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGreeterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGreeterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGreeterResponseValidationError{}
