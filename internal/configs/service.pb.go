// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: configs/service.proto

package configs

import (
	v1 "github.com/origadmin/runtime/gen/go/config/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gins       *ServiceConfig_GINS       `protobuf:"bytes,2,opt,name=gins,proto3" json:"gins,omitempty"`
	Http       *ServiceConfig_HTTP       `protobuf:"bytes,3,opt,name=http,proto3" json:"http,omitempty"`
	Grpc       *ServiceConfig_GRPC       `protobuf:"bytes,4,opt,name=grpc,proto3" json:"grpc,omitempty"`
	Cors       *v1.Cors                  `protobuf:"bytes,100,opt,name=cors,proto3" json:"cors,omitempty"`
	Registry   *v1.Registry              `protobuf:"bytes,200,opt,name=registry,proto3" json:"registry,omitempty"`
	Data       *v1.Data                  `protobuf:"bytes,300,opt,name=data,proto3" json:"data,omitempty"`
	Setting    *Setting                  `protobuf:"bytes,400,opt,name=setting,proto3" json:"setting,omitempty"`
	Service    *v1.Service               `protobuf:"bytes,500,opt,name=service,proto3" json:"service,omitempty"`
	Middleware *ServiceConfig_Middleware `protobuf:"bytes,600,opt,name=middleware,proto3" json:"middleware,omitempty"`
	Host       string                    `protobuf:"bytes,99,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *ServiceConfig) Reset() {
	*x = ServiceConfig{}
	mi := &file_configs_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig) ProtoMessage() {}

func (x *ServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_configs_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig.ProtoReflect.Descriptor instead.
func (*ServiceConfig) Descriptor() ([]byte, []int) {
	return file_configs_service_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceConfig) GetGins() *ServiceConfig_GINS {
	if x != nil {
		return x.Gins
	}
	return nil
}

func (x *ServiceConfig) GetHttp() *ServiceConfig_HTTP {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *ServiceConfig) GetGrpc() *ServiceConfig_GRPC {
	if x != nil {
		return x.Grpc
	}
	return nil
}

func (x *ServiceConfig) GetCors() *v1.Cors {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *ServiceConfig) GetRegistry() *v1.Registry {
	if x != nil {
		return x.Registry
	}
	return nil
}

func (x *ServiceConfig) GetData() *v1.Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ServiceConfig) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *ServiceConfig) GetService() *v1.Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ServiceConfig) GetMiddleware() *ServiceConfig_Middleware {
	if x != nil {
		return x.Middleware
	}
	return nil
}

func (x *ServiceConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// GINS
type ServiceConfig_GINS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network         string               `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr            string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	UseTls          bool                 `protobuf:"varint,3,opt,name=use_tls,proto3" json:"use_tls,omitempty"`
	CertFile        string               `protobuf:"bytes,4,opt,name=cert_file,proto3" json:"cert_file,omitempty"`
	KeyFile         string               `protobuf:"bytes,5,opt,name=key_file,proto3" json:"key_file,omitempty"`
	Timeout         *durationpb.Duration `protobuf:"bytes,6,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	ShutdownTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=shutdown_timeout,proto3,oneof" json:"shutdown_timeout,omitempty"`
	ReadTimeout     *durationpb.Duration `protobuf:"bytes,8,opt,name=read_timeout,proto3,oneof" json:"read_timeout,omitempty"`
	WriteTimeout    *durationpb.Duration `protobuf:"bytes,9,opt,name=write_timeout,proto3,oneof" json:"write_timeout,omitempty"`
	IdleTimeout     *durationpb.Duration `protobuf:"bytes,10,opt,name=idle_timeout,proto3,oneof" json:"idle_timeout,omitempty"`
	Endpoint        string               `protobuf:"bytes,11,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *ServiceConfig_GINS) Reset() {
	*x = ServiceConfig_GINS{}
	mi := &file_configs_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_GINS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_GINS) ProtoMessage() {}

func (x *ServiceConfig_GINS) ProtoReflect() protoreflect.Message {
	mi := &file_configs_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_GINS.ProtoReflect.Descriptor instead.
func (*ServiceConfig_GINS) Descriptor() ([]byte, []int) {
	return file_configs_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ServiceConfig_GINS) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ServiceConfig_GINS) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ServiceConfig_GINS) GetUseTls() bool {
	if x != nil {
		return x.UseTls
	}
	return false
}

func (x *ServiceConfig_GINS) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *ServiceConfig_GINS) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *ServiceConfig_GINS) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ServiceConfig_GINS) GetShutdownTimeout() *durationpb.Duration {
	if x != nil {
		return x.ShutdownTimeout
	}
	return nil
}

func (x *ServiceConfig_GINS) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *ServiceConfig_GINS) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *ServiceConfig_GINS) GetIdleTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

func (x *ServiceConfig_GINS) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

// HTTP
type ServiceConfig_HTTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network         string               `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr            string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	UseTls          bool                 `protobuf:"varint,3,opt,name=use_tls,proto3" json:"use_tls,omitempty"`
	CertFile        string               `protobuf:"bytes,4,opt,name=cert_file,proto3" json:"cert_file,omitempty"`
	KeyFile         string               `protobuf:"bytes,5,opt,name=key_file,proto3" json:"key_file,omitempty"`
	Timeout         *durationpb.Duration `protobuf:"bytes,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ShutdownTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=shutdown_timeout,proto3" json:"shutdown_timeout,omitempty"`
	ReadTimeout     *durationpb.Duration `protobuf:"bytes,8,opt,name=read_timeout,proto3" json:"read_timeout,omitempty"`
	WriteTimeout    *durationpb.Duration `protobuf:"bytes,9,opt,name=write_timeout,proto3" json:"write_timeout,omitempty"`
	IdleTimeout     *durationpb.Duration `protobuf:"bytes,10,opt,name=idle_timeout,proto3" json:"idle_timeout,omitempty"`
	Endpoint        string               `protobuf:"bytes,11,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *ServiceConfig_HTTP) Reset() {
	*x = ServiceConfig_HTTP{}
	mi := &file_configs_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_HTTP) ProtoMessage() {}

func (x *ServiceConfig_HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_configs_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_HTTP.ProtoReflect.Descriptor instead.
func (*ServiceConfig_HTTP) Descriptor() ([]byte, []int) {
	return file_configs_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ServiceConfig_HTTP) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ServiceConfig_HTTP) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ServiceConfig_HTTP) GetUseTls() bool {
	if x != nil {
		return x.UseTls
	}
	return false
}

func (x *ServiceConfig_HTTP) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *ServiceConfig_HTTP) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *ServiceConfig_HTTP) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ServiceConfig_HTTP) GetShutdownTimeout() *durationpb.Duration {
	if x != nil {
		return x.ShutdownTimeout
	}
	return nil
}

func (x *ServiceConfig_HTTP) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *ServiceConfig_HTTP) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *ServiceConfig_HTTP) GetIdleTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

func (x *ServiceConfig_HTTP) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

// GRPC
type ServiceConfig_GRPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network         string               `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr            string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	UseTls          bool                 `protobuf:"varint,3,opt,name=use_tls,proto3" json:"use_tls,omitempty"`
	CertFile        string               `protobuf:"bytes,4,opt,name=cert_file,proto3" json:"cert_file,omitempty"`
	KeyFile         string               `protobuf:"bytes,5,opt,name=key_file,proto3" json:"key_file,omitempty"`
	Timeout         *durationpb.Duration `protobuf:"bytes,6,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	ShutdownTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=shutdown_timeout,proto3,oneof" json:"shutdown_timeout,omitempty"`
	ReadTimeout     *durationpb.Duration `protobuf:"bytes,8,opt,name=read_timeout,proto3,oneof" json:"read_timeout,omitempty"`
	WriteTimeout    *durationpb.Duration `protobuf:"bytes,9,opt,name=write_timeout,proto3,oneof" json:"write_timeout,omitempty"`
	IdleTimeout     *durationpb.Duration `protobuf:"bytes,10,opt,name=idle_timeout,proto3,oneof" json:"idle_timeout,omitempty"`
	Endpoint        string               `protobuf:"bytes,11,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *ServiceConfig_GRPC) Reset() {
	*x = ServiceConfig_GRPC{}
	mi := &file_configs_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_GRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_GRPC) ProtoMessage() {}

func (x *ServiceConfig_GRPC) ProtoReflect() protoreflect.Message {
	mi := &file_configs_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_GRPC.ProtoReflect.Descriptor instead.
func (*ServiceConfig_GRPC) Descriptor() ([]byte, []int) {
	return file_configs_service_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ServiceConfig_GRPC) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ServiceConfig_GRPC) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ServiceConfig_GRPC) GetUseTls() bool {
	if x != nil {
		return x.UseTls
	}
	return false
}

func (x *ServiceConfig_GRPC) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *ServiceConfig_GRPC) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *ServiceConfig_GRPC) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ServiceConfig_GRPC) GetShutdownTimeout() *durationpb.Duration {
	if x != nil {
		return x.ShutdownTimeout
	}
	return nil
}

func (x *ServiceConfig_GRPC) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *ServiceConfig_GRPC) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *ServiceConfig_GRPC) GetIdleTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

func (x *ServiceConfig_GRPC) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

// Websocket
type ServiceConfig_Websocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string               `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr    string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Path    string               `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Codec   string               `protobuf:"bytes,4,opt,name=codec,proto3" json:"codec,omitempty"`
	Timeout *durationpb.Duration `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ServiceConfig_Websocket) Reset() {
	*x = ServiceConfig_Websocket{}
	mi := &file_configs_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_Websocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_Websocket) ProtoMessage() {}

func (x *ServiceConfig_Websocket) ProtoReflect() protoreflect.Message {
	mi := &file_configs_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_Websocket.ProtoReflect.Descriptor instead.
func (*ServiceConfig_Websocket) Descriptor() ([]byte, []int) {
	return file_configs_service_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ServiceConfig_Websocket) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ServiceConfig_Websocket) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ServiceConfig_Websocket) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ServiceConfig_Websocket) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *ServiceConfig_Websocket) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type ServiceConfig_Middleware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics *ServiceConfig_Middleware_Metrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Traces  *ServiceConfig_Middleware_Traces  `protobuf:"bytes,3,opt,name=traces,proto3" json:"traces,omitempty"`
	Logger  *ServiceConfig_Middleware_Logger  `protobuf:"bytes,4,opt,name=logger,proto3" json:"logger,omitempty"`
}

func (x *ServiceConfig_Middleware) Reset() {
	*x = ServiceConfig_Middleware{}
	mi := &file_configs_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_Middleware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_Middleware) ProtoMessage() {}

func (x *ServiceConfig_Middleware) ProtoReflect() protoreflect.Message {
	mi := &file_configs_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_Middleware.ProtoReflect.Descriptor instead.
func (*ServiceConfig_Middleware) Descriptor() ([]byte, []int) {
	return file_configs_service_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ServiceConfig_Middleware) GetMetrics() *ServiceConfig_Middleware_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *ServiceConfig_Middleware) GetTraces() *ServiceConfig_Middleware_Traces {
	if x != nil {
		return x.Traces
	}
	return nil
}

func (x *ServiceConfig_Middleware) GetLogger() *ServiceConfig_Middleware_Logger {
	if x != nil {
		return x.Logger
	}
	return nil
}

type ServiceConfig_Middleware_Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ServiceConfig_Middleware_Metrics) Reset() {
	*x = ServiceConfig_Middleware_Metrics{}
	mi := &file_configs_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_Middleware_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_Middleware_Metrics) ProtoMessage() {}

func (x *ServiceConfig_Middleware_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_configs_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_Middleware_Metrics.ProtoReflect.Descriptor instead.
func (*ServiceConfig_Middleware_Metrics) Descriptor() ([]byte, []int) {
	return file_configs_service_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *ServiceConfig_Middleware_Metrics) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ServiceConfig_Middleware_Metrics) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ServiceConfig_Middleware_Traces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ServiceConfig_Middleware_Traces) Reset() {
	*x = ServiceConfig_Middleware_Traces{}
	mi := &file_configs_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_Middleware_Traces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_Middleware_Traces) ProtoMessage() {}

func (x *ServiceConfig_Middleware_Traces) ProtoReflect() protoreflect.Message {
	mi := &file_configs_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_Middleware_Traces.ProtoReflect.Descriptor instead.
func (*ServiceConfig_Middleware_Traces) Descriptor() ([]byte, []int) {
	return file_configs_service_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (x *ServiceConfig_Middleware_Traces) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ServiceConfig_Middleware_Traces) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ServiceConfig_Middleware_Logger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ServiceConfig_Middleware_Logger) Reset() {
	*x = ServiceConfig_Middleware_Logger{}
	mi := &file_configs_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_Middleware_Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_Middleware_Logger) ProtoMessage() {}

func (x *ServiceConfig_Middleware_Logger) ProtoReflect() protoreflect.Message {
	mi := &file_configs_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_Middleware_Logger.ProtoReflect.Descriptor instead.
func (*ServiceConfig_Middleware_Logger) Descriptor() ([]byte, []int) {
	return file_configs_service_proto_rawDescGZIP(), []int{0, 4, 2}
}

func (x *ServiceConfig_Middleware_Logger) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ServiceConfig_Middleware_Logger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ServiceConfig_Middleware_Cors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled                bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AllowAllOrigins        bool     `protobuf:"varint,2,opt,name=allow_all_origins,proto3" json:"allow_all_origins,omitempty"`
	AllowOrigins           []string `protobuf:"bytes,3,rep,name=allow_origins,proto3" json:"allow_origins,omitempty"`
	AllowMethods           []string `protobuf:"bytes,4,rep,name=allow_methods,proto3" json:"allow_methods,omitempty"`
	AllowHeaders           []string `protobuf:"bytes,5,rep,name=allow_headers,proto3" json:"allow_headers,omitempty"`
	AllowCredentials       bool     `protobuf:"varint,6,opt,name=allow_credentials,proto3" json:"allow_credentials,omitempty"`
	ExposeHeaders          []string `protobuf:"bytes,7,rep,name=expose_headers,proto3" json:"expose_headers,omitempty"`
	MaxAge                 int32    `protobuf:"varint,8,opt,name=max_age,proto3" json:"max_age,omitempty"`
	AllowWildcard          bool     `protobuf:"varint,9,opt,name=allow_wildcard,proto3" json:"allow_wildcard,omitempty"`
	AllowBrowserExtensions bool     `protobuf:"varint,10,opt,name=allow_browser_extensions,proto3" json:"allow_browser_extensions,omitempty"`
	AllowWebSockets        bool     `protobuf:"varint,11,opt,name=allow_web_sockets,proto3" json:"allow_web_sockets,omitempty"`
	AllowFiles             bool     `protobuf:"varint,12,opt,name=allow_files,proto3" json:"allow_files,omitempty"`
}

func (x *ServiceConfig_Middleware_Cors) Reset() {
	*x = ServiceConfig_Middleware_Cors{}
	mi := &file_configs_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig_Middleware_Cors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig_Middleware_Cors) ProtoMessage() {}

func (x *ServiceConfig_Middleware_Cors) ProtoReflect() protoreflect.Message {
	mi := &file_configs_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig_Middleware_Cors.ProtoReflect.Descriptor instead.
func (*ServiceConfig_Middleware_Cors) Descriptor() ([]byte, []int) {
	return file_configs_service_proto_rawDescGZIP(), []int{0, 4, 3}
}

func (x *ServiceConfig_Middleware_Cors) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ServiceConfig_Middleware_Cors) GetAllowAllOrigins() bool {
	if x != nil {
		return x.AllowAllOrigins
	}
	return false
}

func (x *ServiceConfig_Middleware_Cors) GetAllowOrigins() []string {
	if x != nil {
		return x.AllowOrigins
	}
	return nil
}

func (x *ServiceConfig_Middleware_Cors) GetAllowMethods() []string {
	if x != nil {
		return x.AllowMethods
	}
	return nil
}

func (x *ServiceConfig_Middleware_Cors) GetAllowHeaders() []string {
	if x != nil {
		return x.AllowHeaders
	}
	return nil
}

func (x *ServiceConfig_Middleware_Cors) GetAllowCredentials() bool {
	if x != nil {
		return x.AllowCredentials
	}
	return false
}

func (x *ServiceConfig_Middleware_Cors) GetExposeHeaders() []string {
	if x != nil {
		return x.ExposeHeaders
	}
	return nil
}

func (x *ServiceConfig_Middleware_Cors) GetMaxAge() int32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *ServiceConfig_Middleware_Cors) GetAllowWildcard() bool {
	if x != nil {
		return x.AllowWildcard
	}
	return false
}

func (x *ServiceConfig_Middleware_Cors) GetAllowBrowserExtensions() bool {
	if x != nil {
		return x.AllowBrowserExtensions
	}
	return false
}

func (x *ServiceConfig_Middleware_Cors) GetAllowWebSockets() bool {
	if x != nil {
		return x.AllowWebSockets
	}
	return false
}

func (x *ServiceConfig_Middleware_Cors) GetAllowFiles() bool {
	if x != nil {
		return x.AllowFiles
	}
	return false
}

var File_configs_service_proto protoreflect.FileDescriptor

var file_configs_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x14, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa8, 0x19, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x39, 0x0a, 0x04, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x47, 0x49, 0x4e, 0x53, 0x52, 0x04, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x39, 0x0a,
	0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72,
	0x69, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x52, 0x04, 0x67,
	0x72, 0x70, 0x63, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x72, 0x73, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x35, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x90, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x72,
	0x69, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x1a, 0xcd, 0x04, 0x0a, 0x04, 0x47, 0x49, 0x4e,
	0x53, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a,
	0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x01, 0x52, 0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x0c, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x03, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x04, 0x52, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x64, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0xdf, 0x03, 0x0a, 0x04, 0x48, 0x54, 0x54,
	0x50, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3f,
	0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x3d, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0xcd, 0x04, 0x0a, 0x04, 0x47,
	0x52, 0x50, 0x43, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x4a, 0x0a, 0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x0c,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x03, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x04, 0x52, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x64,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x98, 0x01, 0x0a, 0x09, 0x57,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x83, 0x07, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x1a, 0x37, 0x0a, 0x07, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x36, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x36, 0x0a, 0x06,
	0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xe4, 0x03, 0x0a, 0x04, 0x43, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12,
	0x3a, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x65,
	0x62, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x62, 0x0a, 0x29, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2d, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_configs_service_proto_rawDescOnce sync.Once
	file_configs_service_proto_rawDescData = file_configs_service_proto_rawDesc
)

func file_configs_service_proto_rawDescGZIP() []byte {
	file_configs_service_proto_rawDescOnce.Do(func() {
		file_configs_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_configs_service_proto_rawDescData)
	})
	return file_configs_service_proto_rawDescData
}

var file_configs_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_configs_service_proto_goTypes = []any{
	(*ServiceConfig)(nil),                    // 0: origadmin.configs.ServiceConfig
	(*ServiceConfig_GINS)(nil),               // 1: origadmin.configs.ServiceConfig.GINS
	(*ServiceConfig_HTTP)(nil),               // 2: origadmin.configs.ServiceConfig.HTTP
	(*ServiceConfig_GRPC)(nil),               // 3: origadmin.configs.ServiceConfig.GRPC
	(*ServiceConfig_Websocket)(nil),          // 4: origadmin.configs.ServiceConfig.Websocket
	(*ServiceConfig_Middleware)(nil),         // 5: origadmin.configs.ServiceConfig.BuildMiddleware
	(*ServiceConfig_Middleware_Metrics)(nil), // 6: origadmin.configs.ServiceConfig.BuildMiddleware.Metrics
	(*ServiceConfig_Middleware_Traces)(nil),  // 7: origadmin.configs.ServiceConfig.BuildMiddleware.Traces
	(*ServiceConfig_Middleware_Logger)(nil),  // 8: origadmin.configs.ServiceConfig.BuildMiddleware.Logger
	(*ServiceConfig_Middleware_Cors)(nil),    // 9: origadmin.configs.ServiceConfig.BuildMiddleware.Cors
	(*v1.Cors)(nil),                          // 10: config.v1.Cors
	(*v1.Registry)(nil),                      // 11: config.v1.Registry
	(*v1.Data)(nil),                          // 12: config.v1.Data
	(*Setting)(nil),                          // 13: origadmin.configs.Setting
	(*v1.Service)(nil),                       // 14: config.v1.Service
	(*durationpb.Duration)(nil),              // 15: google.protobuf.Duration
}
var file_configs_service_proto_depIdxs = []int32{
	1,  // 0: origadmin.configs.ServiceConfig.gins:type_name -> origadmin.configs.ServiceConfig.GINS
	2,  // 1: origadmin.configs.ServiceConfig.http:type_name -> origadmin.configs.ServiceConfig.HTTP
	3,  // 2: origadmin.configs.ServiceConfig.grpc:type_name -> origadmin.configs.ServiceConfig.GRPC
	10, // 3: origadmin.configs.ServiceConfig.cors:type_name -> config.v1.Cors
	11, // 4: origadmin.configs.ServiceConfig.registry:type_name -> config.v1.Registry
	12, // 5: origadmin.configs.ServiceConfig.data:type_name -> config.v1.Data
	13, // 6: origadmin.configs.ServiceConfig.setting:type_name -> origadmin.configs.Setting
	14, // 7: origadmin.configs.ServiceConfig.service:type_name -> config.v1.Service
	5,  // 8: origadmin.configs.ServiceConfig.middleware:type_name -> origadmin.configs.ServiceConfig.BuildMiddleware
	15, // 9: origadmin.configs.ServiceConfig.GINS.timeout:type_name -> google.protobuf.Duration
	15, // 10: origadmin.configs.ServiceConfig.GINS.shutdown_timeout:type_name -> google.protobuf.Duration
	15, // 11: origadmin.configs.ServiceConfig.GINS.read_timeout:type_name -> google.protobuf.Duration
	15, // 12: origadmin.configs.ServiceConfig.GINS.write_timeout:type_name -> google.protobuf.Duration
	15, // 13: origadmin.configs.ServiceConfig.GINS.idle_timeout:type_name -> google.protobuf.Duration
	15, // 14: origadmin.configs.ServiceConfig.HTTP.timeout:type_name -> google.protobuf.Duration
	15, // 15: origadmin.configs.ServiceConfig.HTTP.shutdown_timeout:type_name -> google.protobuf.Duration
	15, // 16: origadmin.configs.ServiceConfig.HTTP.read_timeout:type_name -> google.protobuf.Duration
	15, // 17: origadmin.configs.ServiceConfig.HTTP.write_timeout:type_name -> google.protobuf.Duration
	15, // 18: origadmin.configs.ServiceConfig.HTTP.idle_timeout:type_name -> google.protobuf.Duration
	15, // 19: origadmin.configs.ServiceConfig.GRPC.timeout:type_name -> google.protobuf.Duration
	15, // 20: origadmin.configs.ServiceConfig.GRPC.shutdown_timeout:type_name -> google.protobuf.Duration
	15, // 21: origadmin.configs.ServiceConfig.GRPC.read_timeout:type_name -> google.protobuf.Duration
	15, // 22: origadmin.configs.ServiceConfig.GRPC.write_timeout:type_name -> google.protobuf.Duration
	15, // 23: origadmin.configs.ServiceConfig.GRPC.idle_timeout:type_name -> google.protobuf.Duration
	15, // 24: origadmin.configs.ServiceConfig.Websocket.timeout:type_name -> google.protobuf.Duration
	6,  // 25: origadmin.configs.ServiceConfig.BuildMiddleware.metrics:type_name -> origadmin.configs.ServiceConfig.BuildMiddleware.Metrics
	7,  // 26: origadmin.configs.ServiceConfig.BuildMiddleware.traces:type_name -> origadmin.configs.ServiceConfig.BuildMiddleware.Traces
	8,  // 27: origadmin.configs.ServiceConfig.BuildMiddleware.logger:type_name -> origadmin.configs.ServiceConfig.BuildMiddleware.Logger
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_configs_service_proto_init() }
func file_configs_service_proto_init() {
	if File_configs_service_proto != nil {
		return
	}
	file_configs_setting_proto_init()
	file_configs_service_proto_msgTypes[1].OneofWrappers = []any{}
	file_configs_service_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_configs_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_configs_service_proto_goTypes,
		DependencyIndexes: file_configs_service_proto_depIdxs,
		MessageInfos:      file_configs_service_proto_msgTypes,
	}.Build()
	File_configs_service_proto = out.File
	file_configs_service_proto_rawDesc = nil
	file_configs_service_proto_goTypes = nil
	file_configs_service_proto_depIdxs = nil
}
