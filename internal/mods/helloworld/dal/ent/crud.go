// Code generated by ent, DO NOT EDIT.

package ent

import (
	"origadmin/basic-layout/internal/mods/helloworld/dal/ent/greeter"
)

// SetGreeterFull set the Greeter
func (gc *GreeterCreate) SetGreeterFull(input *Greeter) *GreeterCreate {
	gc.SetName(input.Name)
	return gc
}

// SetGreeter set the Greeter
func (gc *GreeterCreate) SetGreeter(input *Greeter) *GreeterCreate {
	gc.SetName(input.Name)
	return gc
}

// Omit allows the unselect one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Greeter.Query().
//		Omit(
//		greeter.FieldName,
//		).
//		Scan(ctx, &v)
func (gq *GreeterQuery) Omit(fields ...string) *GreeterSelect {
	omits := make(map[string]struct{}, len(fields))
	for i := range fields {
		omits[fields[i]] = struct{}{}
	}
	for _, col := range greeter.Columns {
		if _, ok := omits[col]; !ok {
			gq.ctx.Fields = append(gq.ctx.Fields, col)
		}
	}

	sbuild := &GreeterSelect{GreeterQuery: gq}
	sbuild.label = greeter.Label
	sbuild.flds, sbuild.scan = &gq.ctx.Fields, sbuild.Scan
	return sbuild
}

// SetGreeterFull set the Greeter
func (gu *GreeterUpdate) SetGreeterFull(input *Greeter) *GreeterUpdate {
	gu.SetName(input.Name)
	return gu
}

// SetGreeter set the Greeter
func (gu *GreeterUpdate) SetGreeter(input *Greeter) *GreeterUpdate {
	gu.SetName(input.Name)
	return gu
}

// SetGreeterFull set the Greeter
func (guo *GreeterUpdateOne) SetGreeterFull(input *Greeter) *GreeterUpdateOne {
	guo.SetName(input.Name)
	return guo
}

// SetGreeter set the Greeter
func (guo *GreeterUpdateOne) SetGreeter(input *Greeter) *GreeterUpdateOne {
	guo.SetName(input.Name)
	return guo
}

// Omit allows the unselect one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (guo *GreeterUpdateOne) Omit(fields ...string) *GreeterUpdateOne {
	omits := make(map[string]struct{}, len(fields))
	for i := range fields {
		omits[fields[i]] = struct{}{}
	}
	guo.fields = []string(nil)
	for _, col := range greeter.Columns {
		if _, ok := omits[col]; !ok {
			guo.fields = append(guo.fields, col)
		}
	}
	return guo
}
